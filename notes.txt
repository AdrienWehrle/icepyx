- For Data we don't need many of the inputs or validations needed for Query

- Should we have a separate module for all file-specific functions?

- Should we have a separate module with all the definitions (e.g. IS2 data dicts)?

- Should we have all attrs and funcs in snake_case format, and as expressive as possible (reqparams -> required_params)?

- Should we have all modules named with single words (for a cleaner file tree structure)?

core
├── __init__.py
├── data.py
├── query.py
├── files.py
├── granules.py
├── formatting.py
├── earthdata.py
├── geospatial.py
├── definitions.py
├── validation.py
├── conversion.py
└── variables.py

- There seem to be same names for different attributes through the code, example:
    _source = files!order (icesat2data.py)
    source = '/path/to/file' (variables.py)

- The use of `files` is abiguous. Should it contain a path or file list?

- What do we need to init the data object? Probably very little info as some info can be inferred from the files themselves.

- `dataset` should be `product`?

- Do we need required `dataset` for `data` object creation? We can get it from file names.

- The file implementation as is break some unit tests. 

- Perhaps a logical separation would be:
    * The class `Query` ivoking functionality from `Granules`
    * The class `Data` ivoking  functionality from`Files`

- Lets use the zarr project as a ref for clean and readeble code.
